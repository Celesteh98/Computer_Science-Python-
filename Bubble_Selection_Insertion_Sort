''' Bubble Sort
Idea: ALgorith that will make severeal passes through the lsit and
swap adjacent elements to ensure the largest element end up at the end of the
list (assuming we're sorting in asscending (least to greatest) order).

'''

def bubbleSort(aList):
    for passnum in range(len(aList) -1, 0 ,-1):
        for i in range(passnum):
            if aList[i] > aList[i+1]:
                    # swap (bubble up!)
                    temp = aList[i]
                    aList[i] = aList[i+1]
                    aList[i+1] = temp
# Bubble sort pytest
def test_bubbleSort():
	list1 = [1,2,3,4,5,6]
	list2 = [2,2,2,2,2,2]
	list3 = []
	list4 = [6,7,5,3,1]
	bubbleSort(list1)
	assert list1 == [1,2,3,4,5,6]
	bubbleSort(list2)
	assert list2 == [2,2,2,2,2,2]
	bubbleSort(list3)
	assert list3 == []
	bubbleSort(list4)
	assert list4 == [1,3,5,6,7]

'''
Selection Sort
* Idea: Similar to Bubble Sort, We make passes through the list and find the
largest element. We can then swap the largest element into the correct place at
the end of the list (assuming we're sorting inascending order).
It is not necessary to swap adjacent elements like in Bubble sort.
Thinking of "selecting" the largest element then placing it in the correct place
'''
def selectionSort(aList):
    for fillslot in range(len(aList)-1,0,-1):
	    positionOfMax=0
	    for location in range(1,fillslot+1):
		    if aList[location]>aList[positionOfMax]:
                        positionOfMax = location
	    # swap largest element in correct place
		    temp = aList[fillslot]
		    aList[fillslot] = aList[positionOfMax]
		    aList[positionOfMax] = temp

def test_selectionSort():
    list1 = [1,2,3,4,5,6]
    list2 = [2,2,2,2,2,2]
    list3 = []
    list4 = [6,7,5,3,1]
    selectionSort(list1)
    assert list1 == [1,2,3,4,5,6]
    selectionSort(list2)
    assert list2 == [2,2,2,2,2,2]
    selectionSort(list3)
    assert list3 == []
    selectionSort(list4)
    assert list4 == [1,3,5,6,7]

'''
Insertion Sort
*Idea: We want to work left-to-right and insert unsorted elements into the
sorted left position of the list.
For Example:
    *the first element is sorted by default.
    *Then we check the second element and determine if it goes
    before or after the first element
    *Then we check the third element and determine if it goes before,
    in the middle, or after the first two (sorted) elements etc
Note that in order to make “room” for the inserted element, we have
to shift the elements greater than the inserted element up by one
'''

def insertionSort(aList):
    for index in range(1,len(aList)):
	currentvalue = aList[index]
	position = index
	# shift elements over by one
	while position > 0 and aList[position-1] > currentvalue:
	    aList[position] = aList[position-1]
	    position = position-1

	# insert element in appropriate place
	    aList[position] = currentvalue

def test_insertionSort():
    list1 = [1,2,3,4,5,6]
    list2 = [2,2,2,2,2,2]
	list3 = []
	list4 = [6,7,5,3,1]
	insertionSort(list1)
	assert list1 == [1,2,3,4,5,6]
	insertionSort(list2)
	assert list2 == [2,2,2,2,2,2]
	insertionSort(list3)
	assert list3 == []
	insertionSort(list4)
	assert list4 == [1,3,5,6,7]
